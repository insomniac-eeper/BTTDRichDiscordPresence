<Project Sdk="Microsoft.NET.Sdk">

    <Import Project="./BTTDCommon.props"/>
    <Import Project="../build/GetDiscordSDK.targets" />

    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <AssemblyName>BTTDRichDiscordPresence</AssemblyName>
        <Description>Add Discord Rich Presence Support.</Description>
        <Product>BTTDRichDiscordPresence</Product>
        <Version>1.0.0</Version>

        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>latest</LangVersion>

        <MinVerTagPrefix>v</MinVerTagPrefix>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.Unity.IL2CPP" Version="6.0.0-be.*" IncludeAssets="compile" />
        <PackageReference Include="BepInEx.PluginInfoProps" Version="2.*" />
    </ItemGroup>

    <ItemGroup>
        <None Update="external/discordsdk/native/discord_game_sdk.dll">
		  <Link>%(Filename)%(Extension)</Link>
          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>

    <Target Name="ClearReferenceCopyLocalPaths" AfterTargets="ResolveAssemblyReferences">
        <ItemGroup>
            <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)"/>
        </ItemGroup>
    </Target>

    <!-- Move the plugin to the game's plugin directory and start the game to test it -->
    <Target Condition="'$(CI)' != 'true'" Name="CopyToPluginDir" AfterTargets="PostBuildEvent">
        <!-- Create a temporary copy of the plugin in the target directory -->
        <!-- This is a workaround because if we copy it directly to the game's plugin directory, an error is thrown because the game is using the plugin -->
        <Copy SourceFiles="$(TargetDir)$(TargetFileName)" DestinationFiles="$(TargetDir)$(TargetFileName).tmp"/>
        <!-- Move the plugin temporary copy to the game's plugin directory -->
        <!-- The move command will overwrite the plugin if it already exists and no error will be thrown -->
        <!-- We can't move the original plugin because it is used by reference for Test project -->
        <Move SourceFiles="$(TargetDir)$(TargetFileName).tmp" DestinationFiles="$(PluginGameDir)$(TargetFileName)"/>
    </Target>

</Project>
